/**
 * Generated by orval v6.5.3 üç∫
 * Do not edit manually.
 * Swagger Example
 * OpenAPI spec version: 1.0.0
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';
import type { Users, Error, ListUsersParams, User } from './model';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * @summary List all users
 */
export const listUsers = (
  params?: ListUsersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Users>> => {
  return axios.get(`/users`, {
    params,
    ...options,
  });
};

export const getListUsersQueryKey = (params?: ListUsersParams) => [
  `/users`,
  ...(params ? [params] : []),
];

export const useListUsers = <
  TData = AsyncReturnType<typeof listUsers>,
  TError = AxiosError<Error>,
>(
  params?: ListUsersParams,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<typeof listUsers>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey(params);

  const queryFn: QueryFunction<AsyncReturnType<typeof listUsers>> = () =>
    listUsers(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof listUsers>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Info for a specific user
 */
export const getUserById = (
  userId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.get(`/users/${userId}`, options);
};

export const getGetUserByIdQueryKey = (userId: string) => [`/users/${userId}`];

export const useGetUserById = <
  TData = AsyncReturnType<typeof getUserById>,
  TError = AxiosError<Error>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<typeof getUserById>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetUserByIdQueryKey(userId);

  const queryFn: QueryFunction<AsyncReturnType<typeof getUserById>> = () =>
    getUserById(userId, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getUserById>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!userId, ...queryOptions },
  );

  return {
    queryKey,
    ...query,
  };
};
